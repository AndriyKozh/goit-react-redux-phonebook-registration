{"version":3,"file":"static/js/623.24d22bf6.chunk.js","mappings":"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","sources":["components/General.styled.js","redux/contacts/selectors.js","components/contactForm/ContactForm.styled.js","components/contactForm/ContactForm.js","components/filter/Filter.styled.js","components/filter/Filter.js","components/contactList/ContactList.styled.js","components/contactList/ContactList.js","pages/Phonebook/Phonebook.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const PhonebokCont = styled.div`\n  padding: 40px;\n  padding-top: 0;\n  margin: 20px;\n  justify-content: center;\n  align-items: center;\n  text-align: center;\n  color: #010101;\n`;\nexport const Contact = styled.div`\n  position: absolute;\n  width: 90%;\n  max-height: 34%;\n\n  left: 50%;\n  top: 83%;\n  transform: translate(-50%, -50%);\n  overflow-y: scroll;\n`;\nexport const SectionTitle = styled.h2`\n  position: absolute;\n  top: 25%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-weight: normal;\n  font-size: 40px;\n  margin: 20px 0 20px 0;\n  width: 100%;\n`;\n","// створюємо селектори для використання в потрібних частинах проекту через useSelector\n\nexport const selectContacts = state => state.phonebooks.contacts;\n\nexport const selectIsLoading = state => state.phonebooks.isLoading;\n\nexport const selectError = state => state.phonebooks.error;\n\nexport const selectFilter = state => state.filter.data;\n","import { Form, Field, ErrorMessage } from 'formik';\nimport styled from 'styled-components';\n\nexport const MainForm = styled(Form)`\n  display: flex;\n  position: absolute;\n  top: 30%;\n  left: 50%;\n  transform: translate(-50%);\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n\n  padding: 0 20px 0 20px;\n  width: 89%;\n\n  border-radius: 4px;\n`;\n\nexport const Lable = styled.label`\n  align-items: center;\n  justify-content: center;\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  border: transparent;\n`;\n\nexport const InputField = styled(Field)`\n  width: 105%;\n  height: 30px;\n  border: transparent;\n  padding: 4px 10px 4px 10px;\n\n  box-shadow: rgba(17, 17, 26, 0.05) 0px 1px 0px,\n    rgba(17, 17, 26, 0.1) 0px 0px 8px;\n`;\nexport const ErrorMess = styled(ErrorMessage)`\n  margin: 5px;\n  color: #f45707;\n  font-style: italic;\n  font-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;\n  text-align: left;\n`;\nexport const Button = styled.button`\n  padding: 3px 15px 3px 15px;\n  margin-top: 5px;\n  margin-bottom: 30px;\n  cursor: pointer;\n  font-size: 16px;\n  position: absolute;\n  top: 100%;\n  left: 5px;\n  border: none;\n  background-color: #fff;\n  border-radius: 4px;\n\n  &:hover,\n  :focus {\n    background-color: #2a404e;\n    color: #fafaf8;\n    transition: all 300ms ease;\n  }\n`;\n\nexport const NewContact = styled.h3`\n  text-align: center;\n  margin-top: 40px;\n`;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/operation';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { Formik } from 'formik';\nimport Notiflix from 'notiflix';\n// import * as yup from 'yup';\nimport {\n  MainForm,\n  Lable,\n  InputField,\n  ErrorMess,\n  Button,\n  NewContact,\n} from './ContactForm.styled';\n\nNotiflix.Notify.init({\n  className: 'notiflix-report',\n  width: '320px',\n  position: 'center-center',\n  backgroundColor: '#f8f8f8',\n  borderRadius: '25px',\n  rtl: false,\n  timeout: 1000,\n  zindex: 4002,\n  backOverlay: true,\n  backOverlayColor: 'rgba(0,0,0,0.5)',\n  backOverlayClickToClose: false,\n  fontFamily: 'Quicksand',\n  svgSize: '110px',\n  plainText: true,\n  titleFontSize: '16px',\n  titleMaxLength: 34,\n  messageFontSize: '13px',\n  messageMaxLength: 400,\n  buttonFontSize: '14px',\n  buttonMaxLength: 34,\n  cssAnimation: true,\n  cssAnimationDuration: 360,\n  cssAnimationStyle: 'fade', // 'fade' - 'zoom'\n\n  success: {\n    svgColor: '#32c682',\n    titleColor: '#1e1e1e',\n    messageColor: '#242424',\n    buttonBackground: '#32c682',\n    buttonColor: '#fff',\n    backOverlayColor: 'rgba(50,198,130,0.2)',\n  },\n});\n\n// присвоюємо в константи умови для валідації\n// const patternName =\n//   /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/;\n// const massageName =\n//   \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\";\n// const patternPhone = /^[+]*[(]{0,1}[0-9]{1,3}[)]{0,1}[-\\s./0-9]*$/g;\n// const massagePhone =\n//   'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +';\n\n// створюємо схему валідації для бібліотеки yap\n// let schema = yup.object().shape({\n//   name: yup\n//     .string()\n//     .matches(patternName, massageName)\n//     .required('Name is required'),\n//   number: yup\n//     .string()\n//     .matches(patternPhone, massagePhone)\n//     .required('A phone number is required'),\n// });\n\nconst initialValues = { name: '', number: '' };\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const handleSubmit = (values, { resetForm }) => {\n    resetForm();\n    if (contacts.some(contact => contact.name === values.name)) {\n      Notiflix.Notify.failure('Contact is already in contact list');\n    } else dispatch(addContact(values));\n  };\n  return (\n    <>\n      <NewContact>New contact</NewContact>\n      <Formik\n        initialValues={initialValues}\n        onSubmit={handleSubmit}\n        // validationSchema={schema}\n      >\n        <MainForm>\n          <Lable>\n            <InputField type=\"text\" name=\"name\" placeholder=\"Name\" />\n          </Lable>\n          <ErrorMess name=\"name\" component=\"p\" />\n          <Lable>\n            <InputField type=\"tel\" name=\"number\" placeholder=\"Number\" />\n          </Lable>\n          <ErrorMess name=\"number\" component=\"p\" />\n          <Button type=\"submit\">Add contact</Button>\n        </MainForm>\n      </Formik>\n    </>\n  );\n};\n","import styled from 'styled-components';\n\nexport const InputField = styled.input`\n  width: 100%;\n  border-radius: 10px;\n  margin-top: 10px;\n  padding: 4px 10px 4px 10px;\n  border: transparent;\n  padding: 4px 10px 4px 10px;\n  box-shadow: rgba(17, 17, 26, 0.05) 0px 1px 0px,\n    rgba(17, 17, 26, 0.1) 0px 0px 8px;\n`;\n\nexport const Lable = styled.label`\n  font-size: 18px;\n  width: 40%;\n  height: 30px;\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 20px;\n  margin-left: 3px;\n  font-weight: bold;\n  border: transparent;\n  opacity: 0.9;\n`;\n\nexport const Contacts = styled.h2`\n  text-align: center;\n`;\n\nexport const BlockFilter = styled.div`\n  position: absolute;\n  top: 45%;\n  width: 100%;\n`;\n","import { useDispatch } from 'react-redux';\nimport { filterContscts } from 'redux/contacts/filterSlice';\nimport { InputField, Lable, Contacts, BlockFilter } from './Filter.styled';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const inputData = e => {\n    const typedData = e.target.value;\n    dispatch(filterContscts(typedData));\n  };\n\n  return (\n    <BlockFilter>\n      <Contacts>Contacts</Contacts>\n      <Lable>\n        Find contacts by name\n        <InputField\n          type=\"text\"\n          name=\"filter\"\n          onChange={inputData}\n          placeholder=\"Filter\"\n        />\n      </Lable>\n    </BlockFilter>\n  );\n};\n","import styled from 'styled-components';\n\nexport const ContactField = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  border-bottom: 1px solid #000;\n  margin: 5px;\n`;\n\nexport const Contact = styled.p`\n  display: flex;\n  align-items: center;\n  color: #d4d4d4;\n  font-weight: 700;\n  font-size: large;\n`;\n\nexport const NumberWrap = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\nexport const Number = styled.p`\n  display: block;\n  font-weight: 700;\n  font-size: medium;\n  margin: 0;\n  margin-right: 50px;\n  color: #d4d4d4;\n`;\n\nexport const Button = styled.div`\n  margin-left: auto;\n\n  padding: 3px 15px 3px 15px;\n  border: none;\n  font-weight: normal;\n  cursor: pointer;\n  border-radius: 5px;\n  &:hover {\n    background-color: #ef4444;\n    color: #fff;\n  }\n`;\n","import { useSelector, useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operation';\nimport { selectContacts, selectFilter } from 'redux/contacts/selectors';\nimport {\n  ContactField,\n  Contact,\n  Button,\n  Number,\n  NumberWrap,\n} from './ContactList.styled';\n\nexport const ContactList = () => {\n  const contactList = useSelector(selectContacts);\n  const contactFilter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n  const filtredContact = contactList.filter(contact =>\n    contact.name.toLowerCase().includes(contactFilter.toLowerCase())\n  );\n  return filtredContact.map(contact => (\n    <ContactField key={contact.id}>\n      <Contact> {contact.name} : </Contact>\n      <NumberWrap>\n        <Number>{contact.number}</Number>\n        <Button\n          type=\"button\"\n          onClick={() => dispatch(deleteContact(contact.id))}\n        >\n          Delete\n        </Button>\n      </NumberWrap>\n    </ContactField>\n  ));\n};\n","import { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/operation';\nimport { selectError, selectIsLoading } from 'redux/contacts/selectors';\nimport { Contact } from '../../components/General.styled';\nimport { ContactForm } from '../../components/contactForm/ContactForm';\nimport { Filter } from '../../components/filter/Filter';\nimport { ContactList } from '../../components/contactList/ContactList';\nimport { useEffect } from 'react';\n\nexport default function Phonebook() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n  return (\n    <div>\n      <ContactForm />\n\n      <Filter />\n      <Contact>\n        {isLoading && !error && <b>Request in progress...</b>}\n        <ContactList />\n      </Contact>\n    </div>\n  );\n}\n"],"names":["Contact","styled","SectionTitle","selectContacts","state","phonebooks","contacts","selectIsLoading","isLoading","selectError","error","selectFilter","filter","data","MainForm","Form","Lable","InputField","Field","ErrorMess","ErrorMessage","Button","NewContact","Notiflix","className","width","position","backgroundColor","borderRadius","rtl","timeout","zindex","backOverlay","backOverlayColor","backOverlayClickToClose","fontFamily","svgSize","plainText","titleFontSize","titleMaxLength","messageFontSize","messageMaxLength","buttonFontSize","buttonMaxLength","cssAnimation","cssAnimationDuration","cssAnimationStyle","success","svgColor","titleColor","messageColor","buttonBackground","buttonColor","initialValues","name","number","ContactForm","dispatch","useDispatch","useSelector","onSubmit","values","resetForm","some","contact","addContact","type","placeholder","component","Contacts","BlockFilter","Filter","onChange","e","typedData","target","value","filterContscts","ContactField","NumberWrap","Number","ContactList","contactList","contactFilter","toLowerCase","includes","map","onClick","deleteContact","id","Phonebook","useEffect","fetchContacts"],"sourceRoot":""}